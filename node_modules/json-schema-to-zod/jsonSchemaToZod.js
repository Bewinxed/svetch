"use strict";
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonSchemaToZod = exports.jsonSchemaToZodDereffed = void 0;
const json_refs_1 = require("json-refs");
const parseSchema_1 = require("./parsers/parseSchema");
const format_1 = require("./utils/format");
const jsonSchemaToZodDereffed = async (schema, options) => {
  var _a;
  if (typeof schema === "boolean") {
    return (0, exports.jsonSchemaToZod)(schema, options);
  }
  schema = (
    await (0, json_refs_1.resolveRefs)(
      schema,
      (_a =
        options === null || options === void 0
          ? void 0
          : options.jsonRefsOptions) !== null && _a !== void 0
        ? _a
        : (
            options === null || options === void 0
              ? void 0
              : options.recursionDepth
          )
        ? { resolveCirculars: true }
        : undefined
    )
  ).resolved;
  return (0, exports.jsonSchemaToZod)(schema, options);
};
exports.jsonSchemaToZodDereffed = jsonSchemaToZodDereffed;
const jsonSchemaToZod = (schema, _a = {}) => {
  var { module = true, name } = _a,
    rest = __rest(_a, ["module", "name"]);
  let result = (0, parseSchema_1.parseSchema)(
    schema,
    Object.assign({ module, name, path: [], seen: new Map() }, rest)
  );
  if (module) {
    if (module === "cjs") {
      result = `
        const { z } = require('zod')

        module.exports = ${
          name ? `{ ${JSON.stringify(name)}: ${result} }` : result
        }
      `;
    } else {
      result = `
        import { z } from 'zod'

        export ${name ? `const ${name} =` : `default`} ${result}
      `;
    }
  } else {
    result = `const ${name || "schema"} = ${result}`;
  }
  return (0, format_1.format)(result);
};
exports.jsonSchemaToZod = jsonSchemaToZod;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseObject = void 0;
const parseAnyOf_1 = require("./parseAnyOf");
const parseOneOf_1 = require("./parseOneOf");
const parseSchema_1 = require("./parseSchema");
const parseAllOf_1 = require("./parseAllOf");
function parseObject(objectSchema, refs) {
  let properties = undefined;
  if (objectSchema.properties) {
    properties = "z.object({";
    properties += Object.keys(objectSchema.properties)
      .map((key) => {
        const propSchema = objectSchema.properties[key];
        const result = `${JSON.stringify(key)}:${(0, parseSchema_1.parseSchema)(
          propSchema,
          Object.assign(Object.assign({}, refs), {
            path: [...refs.path, "properties", key],
          })
        )}`;
        const hasDefault =
          (typeof propSchema === "object" &&
            propSchema.default !== undefined) ||
          (typeof objectSchema.default === "object" &&
            objectSchema.default !== null &&
            key in objectSchema.default);
        const required = Array.isArray(objectSchema.required)
          ? objectSchema.required.includes(key)
          : typeof propSchema === "object" && propSchema.required === true;
        const optional = !hasDefault && !required;
        return optional ? `${result}.optional()` : result;
      })
      .join(",");
    properties += "})";
  }
  const additionalProperties =
    objectSchema.additionalProperties !== undefined
      ? (0, parseSchema_1.parseSchema)(
          objectSchema.additionalProperties,
          Object.assign(Object.assign({}, refs), {
            path: [...refs.path, "additionalProperties"],
          })
        )
      : undefined;
  let patternProperties = undefined;
  if (objectSchema.patternProperties) {
    const parsedPatternProperties = Object.fromEntries(
      Object.entries(objectSchema.patternProperties).map(([key, value]) => {
        return [
          key,
          (0, parseSchema_1.parseSchema)(
            value,
            Object.assign(Object.assign({}, refs), {
              path: [...refs.path, "patternProperties", key],
            })
          ),
        ];
      }, {})
    );
    patternProperties = "";
    if (properties) {
      if (additionalProperties) {
        patternProperties += `.catchall(z.union([${[
          ...Object.values(parsedPatternProperties),
          additionalProperties,
        ]}]))`;
      } else if (Object.keys(parsedPatternProperties).length > 1) {
        patternProperties += `.catchall(z.union([${Object.values(
          parsedPatternProperties
        )}]))`;
      } else {
        patternProperties += `.catchall(${Object.values(
          parsedPatternProperties
        )})`;
      }
    } else {
      if (additionalProperties) {
        patternProperties += `z.record(z.union([${[
          ...Object.values(parsedPatternProperties),
          additionalProperties,
        ]}]))`;
      } else if (Object.keys(parsedPatternProperties).length > 1) {
        patternProperties += `z.record(z.union([${Object.values(
          parsedPatternProperties
        )}]))`;
      } else {
        patternProperties += `z.record(${Object.values(
          parsedPatternProperties
        )})`;
      }
    }
    patternProperties += ".superRefine((value, ctx) => {\n";
    patternProperties += "for (const key in value) {\n";
    if (additionalProperties) {
      if (objectSchema.properties) {
        patternProperties += `let evaluated = [${Object.keys(
          objectSchema.properties
        )
          .map((key) => JSON.stringify(key))
          .join(", ")}].includes(key)\n`;
      } else {
        patternProperties += `let evaluated = false\n`;
      }
    }
    for (const key in objectSchema.patternProperties) {
      patternProperties +=
        "if (key.match(new RegExp(" + JSON.stringify(key) + "))) {\n";
      if (additionalProperties) {
        patternProperties += "evaluated = true\n";
      }
      patternProperties +=
        "const result = " +
        parsedPatternProperties[key] +
        ".safeParse(value[key])\n";
      patternProperties += "if (!result.success) {\n";
      patternProperties += `ctx.addIssue({
          path: [...ctx.path, key],
          code: 'custom',
          message: \`Invalid input: Key matching regex /\${key}/ must match schema\`,
          params: {
            issues: result.error.issues
          }
        })\n`;
      patternProperties += "}\n";
      patternProperties += "}\n";
    }
    if (additionalProperties) {
      patternProperties += "if (!evaluated) {\n";
      patternProperties +=
        "const result = " + additionalProperties + ".safeParse(value[key])\n";
      patternProperties += "if (!result.success) {\n";
      patternProperties += `ctx.addIssue({
          path: [...ctx.path, key],
          code: 'custom',
          message: \`Invalid input: must match catchall schema\`,
          params: {
            issues: result.error.issues
          }
        })\n`;
      patternProperties += "}\n";
      patternProperties += "}\n";
    }
    patternProperties += "}\n";
    patternProperties += "})";
  }
  let output = properties
    ? patternProperties
      ? properties + patternProperties
      : additionalProperties
      ? additionalProperties === "z.never()"
        ? properties + ".strict()"
        : properties + `.catchall(${additionalProperties})`
      : properties
    : patternProperties
    ? patternProperties
    : additionalProperties
    ? `z.record(${additionalProperties})`
    : "z.record(z.any())";
  if (parseSchema_1.its.an.anyOf(objectSchema)) {
    output += `.and(${(0, parseAnyOf_1.parseAnyOf)(
      Object.assign(Object.assign({}, objectSchema), {
        anyOf: objectSchema.anyOf.map((x) =>
          typeof x === "object" &&
          !x.type &&
          (x.properties || x.additionalProperties || x.patternProperties)
            ? Object.assign(Object.assign({}, x), { type: "object" })
            : x
        ),
      }),
      refs
    )})`;
  }
  if (parseSchema_1.its.a.oneOf(objectSchema)) {
    output += `.and(${(0, parseOneOf_1.parseOneOf)(
      Object.assign(Object.assign({}, objectSchema), {
        oneOf: objectSchema.oneOf.map((x) =>
          typeof x === "object" &&
          !x.type &&
          (x.properties || x.additionalProperties || x.patternProperties)
            ? Object.assign(Object.assign({}, x), { type: "object" })
            : x
        ),
      }),
      refs
    )})`;
  }
  if (parseSchema_1.its.an.allOf(objectSchema)) {
    output += `.and(${(0, parseAllOf_1.parseAllOf)(
      Object.assign(Object.assign({}, objectSchema), {
        allOf: objectSchema.allOf.map((x) =>
          typeof x === "object" &&
          !x.type &&
          (x.properties || x.additionalProperties || x.patternProperties)
            ? Object.assign(Object.assign({}, x), { type: "object" })
            : x
        ),
      }),
      refs
    )})`;
  }
  return output;
}
exports.parseObject = parseObject;

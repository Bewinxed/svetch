import {
  JSONSchema7,
  JSONSchema7Definition,
  JSONSchema7Type,
  JSONSchema7TypeName,
} from "json-schema";
import { Refs } from "../Types";
export declare const parseSchema: (
  schema: JSONSchema7 | boolean,
  refs?: Refs
) => string;
export declare const its: {
  an: {
    object: (x: JSONSchema7) => x is JSONSchema7 & {
      type: "object";
    };
    array: (x: JSONSchema7) => x is JSONSchema7 & {
      type: "array";
    };
    anyOf: (x: JSONSchema7) => x is JSONSchema7 & {
      anyOf: JSONSchema7Definition[];
    };
    allOf: (x: JSONSchema7) => x is JSONSchema7 & {
      allOf: JSONSchema7Definition[];
    };
    enum: (x: JSONSchema7) => x is JSONSchema7 & {
      enum: JSONSchema7Type | JSONSchema7Type[];
    };
  };
  a: {
    nullable: (x: JSONSchema7) => x is JSONSchema7 & {
      nullable: true;
    };
    multipleType: (x: JSONSchema7) => x is JSONSchema7 & {
      type: JSONSchema7TypeName[];
    };
    not: (x: JSONSchema7) => x is JSONSchema7 & {
      not: JSONSchema7Definition;
    };
    const: (x: JSONSchema7) => x is JSONSchema7 & {
      const: JSONSchema7Type;
    };
    primitive: <T extends "string" | "number" | "boolean" | "integer" | "null">(
      x: JSONSchema7,
      p: T
    ) => x is JSONSchema7 & {
      type: T;
    };
    conditional: (x: JSONSchema7) => x is JSONSchema7 & {
      if: JSONSchema7Definition;
      then: JSONSchema7Definition;
      else: JSONSchema7Definition;
    };
    oneOf: (x: JSONSchema7) => x is JSONSchema7 & {
      oneOf: JSONSchema7Definition[];
    };
  };
};
